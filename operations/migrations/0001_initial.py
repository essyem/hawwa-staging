# Generated by Django 5.2.3 on 2025-09-19 04:26

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0004_alter_booking_booking_number'),
        ('services', '0001_initial'),
        ('vendors', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VendorPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('quality_score', 'Quality Score'), ('response_time', 'Response Time'), ('completion_rate', 'Completion Rate'), ('customer_satisfaction', 'Customer Satisfaction'), ('punctuality', 'Punctuality'), ('cost_effectiveness', 'Cost Effectiveness'), ('availability', 'Availability'), ('expertise_level', 'Expertise Level')], max_length=30)),
                ('value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('max_value', models.DecimalField(decimal_places=2, default=Decimal('100.00'), max_digits=8)),
                ('calculation_method', models.CharField(default='manual', max_length=50)),
                ('data_points_used', models.IntegerField(default=1)),
                ('confidence_level', models.DecimalField(decimal_places=2, default=Decimal('100.00'), max_digits=5)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookings.booking')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.service')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='vendors.vendorprofile')),
            ],
            options={
                'verbose_name': 'Vendor Performance Metric',
                'verbose_name_plural': 'Vendor Performance Metrics',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('waiting_approval', 'Waiting Approval'), ('paused', 'Paused'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('current_step', models.IntegerField(default=0)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('context_data', models.JSONField(default=dict, help_text='Instance-specific data')),
                ('execution_log', models.JSONField(default=list, help_text='Execution log entries')),
                ('error_details', models.JSONField(default=dict, help_text='Error information if failed')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_workflows', to=settings.AUTH_USER_MODEL)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bookings.booking')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Workflow Instance',
                'verbose_name_plural': 'Workflow Instances',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OperationalAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('alert_type', models.CharField(choices=[('sla_violation', 'SLA Violation'), ('quality_drop', 'Quality Drop'), ('vendor_unavailable', 'Vendor Unavailable'), ('workflow_failed', 'Workflow Failed'), ('performance_issue', 'Performance Issue'), ('resource_overload', 'Resource Overload'), ('customer_complaint', 'Customer Complaint'), ('system_error', 'System Error')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('open', 'Open'), ('acknowledged', 'Acknowledged'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('alert_data', models.JSONField(default=dict, help_text='Additional alert data')),
                ('resolution_notes', models.TextField(blank=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookings.booking')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vendors.vendorprofile')),
                ('workflow_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='operations.workflowinstance')),
            ],
            options={
                'verbose_name': 'Operational Alert',
                'verbose_name_plural': 'Operational Alerts',
                'ordering': ['-severity', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Workflow template name', max_length=200)),
                ('description', models.TextField(help_text='Detailed workflow description')),
                ('workflow_type', models.CharField(choices=[('booking_processing', 'Booking Processing'), ('vendor_assignment', 'Vendor Assignment'), ('quality_check', 'Quality Check'), ('payment_processing', 'Payment Processing'), ('customer_onboarding', 'Customer Onboarding'), ('service_delivery', 'Service Delivery'), ('complaint_resolution', 'Complaint Resolution'), ('performance_review', 'Performance Review')], max_length=50)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual Trigger'), ('time_based', 'Time-Based'), ('event_based', 'Event-Based'), ('condition_based', 'Condition-Based')], default='manual', max_length=50)),
                ('steps_config', models.JSONField(default=dict, help_text='Workflow steps configuration')),
                ('conditions_config', models.JSONField(default=dict, help_text='Workflow conditions and rules')),
                ('automation_rules', models.JSONField(default=dict, help_text='Automation rules and triggers')),
                ('is_active', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('max_parallel_instances', models.IntegerField(default=10)),
                ('estimated_duration_minutes', models.IntegerField(default=60)),
                ('priority_level', models.IntegerField(default=5, help_text='1=Highest, 10=Lowest')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('version', models.IntegerField(default=1)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_workflows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Workflow Template',
                'verbose_name_plural': 'Workflow Templates',
                'ordering': ['priority_level', 'name'],
            },
        ),
        migrations.AddField(
            model_name='workflowinstance',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='operations.workflowtemplate'),
        ),
        migrations.CreateModel(
            name='AutomationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rule_type', models.CharField(choices=[('trigger', 'Trigger Rule'), ('condition', 'Condition Rule'), ('action', 'Action Rule'), ('escalation', 'Escalation Rule')], max_length=20)),
                ('trigger_event', models.CharField(blank=True, choices=[('booking_created', 'Booking Created'), ('booking_confirmed', 'Booking Confirmed'), ('payment_received', 'Payment Received'), ('service_completed', 'Service Completed'), ('customer_complaint', 'Customer Complaint'), ('vendor_assigned', 'Vendor Assigned'), ('quality_score_updated', 'Quality Score Updated'), ('sla_violation', 'SLA Violation')], max_length=50, null=True)),
                ('conditions', models.JSONField(default=dict, help_text='Rule conditions')),
                ('actions', models.JSONField(default=dict, help_text='Actions to perform')),
                ('applies_to_types', models.JSONField(default=list, help_text='Entity types this rule applies to')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=5)),
                ('max_executions_per_day', models.IntegerField(default=100)),
                ('execution_count', models.IntegerField(default=0)),
                ('last_executed', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='operations.workflowtemplate')),
            ],
            options={
                'verbose_name': 'Automation Rule',
                'verbose_name_plural': 'Automation Rules',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_number', models.IntegerField()),
                ('name', models.CharField(max_length=200)),
                ('step_type', models.CharField(choices=[('task', 'Task'), ('decision', 'Decision'), ('approval', 'Approval'), ('notification', 'Notification'), ('api_call', 'API Call'), ('assignment', 'Assignment'), ('quality_check', 'Quality Check'), ('delay', 'Delay')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('config', models.JSONField(default=dict, help_text='Step-specific configuration')),
                ('input_data', models.JSONField(default=dict, help_text='Input data for this step')),
                ('output_data', models.JSONField(default=dict, help_text='Output data from this step')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('depends_on', models.ManyToManyField(blank=True, to='operations.workflowstep')),
                ('workflow_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='operations.workflowinstance')),
            ],
            options={
                'verbose_name': 'Workflow Step',
                'verbose_name_plural': 'Workflow Steps',
                'ordering': ['workflow_instance', 'step_number'],
                'unique_together': {('workflow_instance', 'step_number')},
            },
        ),
    ]
