"""
Django settings for hawwa project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use an environment variable for production. Keep the development fallback for
# local development only. Never commit a production secret key to source.
_env_secret = os.environ.get('HAWWA_SECRET_KEY') or os.environ.get('SECRET_KEY')
if _env_secret:
    SECRET_KEY = _env_secret
else:
    # Development fallback only
    SECRET_KEY = 'django-insecure-wuy_yg&5m5=b3%dvz@!(c(!_@+w@slo^b-svc67pt$o!okv+9f'

# Auto-detect environment based on multiple indicators
# 1. Explicit environment variables (HAWWA_ENV, DJANGO_PRODUCTION)
# 2. Presence of gunicorn/uwsgi (production WSGI servers)
# 3. Running as a service (systemd)
# 4. Development server indicators
_explicit_prod = os.environ.get('HAWWA_ENV', '').lower() in ('production', 'staging') or os.environ.get('DJANGO_PRODUCTION') in ('1', 'true', 'True')
_has_wsgi_server = any(name in os.environ.get('SERVER_SOFTWARE', '') for name in ['gunicorn', 'uwsgi'])
_is_service = os.environ.get('INVOCATION_ID') is not None  # systemd service
_is_dev_server = 'runserver' in sys.argv or 'manage.py' in sys.argv[0] if sys.argv else False

# Production if explicitly set OR running under WSGI server OR running as service (but not if dev server)
_is_prod = (_explicit_prod or _has_wsgi_server or _is_service) and not _is_dev_server
DEBUG = not _is_prod

# Always show debug info in console for development
if DEBUG:
    print(f"üöÄ Hawwa Development Mode - DEBUG={DEBUG}")
else:
    print(f"üåê Hawwa Production Mode - DEBUG={DEBUG} (Environment: {os.environ.get('HAWWA_ENV', 'auto-detected')})")

# Hosts allowed. Use environment variable to override in production.
ALLOWED_HOSTS = os.environ.get('HAWWA_ALLOWED_HOSTS', '127.0.0.1,localhost,192.168.100.2,hawwawellness.com,www.hawwawellness.com,staging.hawwa.online').split(',')

# Production security defaults (applied when in production mode)
if _is_prod:
    # Detect test runner to avoid changing behavior during tests (which use HTTP by default)
    _running_tests = any(('test' in a or 'pytest' in a) for a in sys.argv)
    # HSTS: only enable after verifying HTTPS termination
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000')) if not _running_tests else 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True') in ('1', 'true', 'True')
    SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'True') in ('1', 'true', 'True')
    SECURE_SSL_REDIRECT = (os.environ.get('SECURE_SSL_REDIRECT', 'True') in ('1', 'true', 'True')) and not _running_tests
    SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'True') in ('1', 'true', 'True')
    CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'True') in ('1', 'true', 'True')
    # X-Frame-Options is already set by default middleware, but explicit is good
    X_FRAME_OPTIONS = os.environ.get('X_FRAME_OPTIONS', 'DENY')
    # Basic sanity: require a non-default secret key
    if not _running_tests:
        if not _env_secret or _env_secret.startswith('django-insecure-'):
            raise ImproperlyConfigured('A strong SECRET_KEY must be set in the environment when running in production.')


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'crispy_forms',
    'crispy_bootstrap5',
    'corsheaders',
    'django_extensions',
    'import_export',
    # Two-factor authentication and OTP
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'two_factor',
    'phonenumber_field',
]

LOCAL_APPS = [
    'accounts',
    'core',
    'services',
    'bookings',
    'vendors',
    'ai_buddy',
    'wellness',
    'payments',
    'reporting',
    'admin_dashboard',
    'operations',
    'analytics',
    'financial',
    'hrms',
    'change_management',
    'docpool',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # django-otp middleware should be early so authentication can use OTP
    'django_otp.middleware.OTPMiddleware',
    'hawwa.middleware.request_id.RequestIDMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'hawwa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                    'django.template.context_processors.request',
                    'django.template.context_processors.i18n',
                    'django.template.context_processors.static',
                    'django.template.context_processors.media',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'hawwa.context_processors.hawwa_settings',
                    'core.context_processors.app_title',
                ],
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'services.templatetags.service_extras',
            ],
        },
    },
]

WSGI_APPLICATION = 'hawwa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

'''
# Database configuration for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'hawwa_db',
        'USER': 'dbadmin',
        'PASSWORD': '0penP@$$',
        'HOST': 'localhost',
        'PORT': '5432',
        'CONN_MAX_AGE': 0,  # Disable persistent connections for development
        'OPTIONS': {
            'connect_timeout': 30,
        }
    }
}
'''
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Default sidebar configuration: a list of sections. Each section is a dict with
# title and items: {"title": "Apps", "items": [{"label":"Services", "url_name":"services:service_list"}, ...]}
# Projects can override this in their environment-specific settings.
HAWWA_SIDEBAR_APPS = [
    {
        'title': 'Productivity',
        'items': [
            {'label': 'AI Buddy', 'url_name': 'ai_buddy:home', 'icon': 'fas fa-robot'},
            {'label': 'Vendors', 'url_name': 'vendors:dashboard', 'icon': 'fas fa-store'},
        ]
    }
]

# Ensure all local apps are discoverable in the sidebar. This generates a
# lightweight "Apps" section with a default URL naming convention of
# <app>:dashboard when not explicitly configured above. We skip internal
# framework apps like `accounts` and `core` here because they are represented
# elsewhere or use different entry points.
_sidebar_apps = {item.get('url_name').split(':')[0] for section in HAWWA_SIDEBAR_APPS for item in section.get('items', []) if item.get('url_name')}
_apps_section = {'title': 'Apps', 'items': []}
for _app in LOCAL_APPS:
    if _app in ('accounts', 'core'):
        continue
    if _app in _sidebar_apps:
        # already represented
        continue
    # friendly label and a reasonable default url_name
    label = _app.replace('_', ' ').title()
    default_url = f"{_app}:dashboard"
    # choose a simple icon per app where sensible, otherwise use folder
    icon_map = {
        'hrms': 'fas fa-users',
        'bookings': 'fas fa-calendar-check',
        'services': 'fas fa-spa',
        'vendors': 'fas fa-store',
        'ai_buddy': 'fas fa-robot',
        'wellness': 'fas fa-heart',
        'payments': 'fas fa-credit-card',
        'reporting': 'fas fa-chart-bar',
        'admin_dashboard': 'fas fa-cogs',
        'operations': 'fas fa-tools',
        'analytics': 'fas fa-chart-line',
        'financial': 'fas fa-wallet',
        'change_management': 'fas fa-exchange-alt',
    }
    icon = icon_map.get(_app, 'fas fa-folder')
    _apps_section['items'].append({'label': label, 'url_name': default_url, 'icon': icon})

# Add a dedicated HRMS section with comprehensive modules
HRMS_SIDEBAR = {
    'title': 'HRMS',
    'items': [
        {'label': 'Dashboard', 'url_name': 'hrms:dashboard', 'icon': 'fas fa-tachometer-alt', 'perm': None},
        {'label': 'Employees', 'url_name': 'hrms:employee_list', 'icon': 'fas fa-user-friends', 'perm': 'hrms.view_employeeprofile'},
        {'label': 'Departments', 'url_name': 'hrms:department_list', 'icon': 'fas fa-sitemap', 'perm': 'hrms.view_department'},
        {'label': 'Positions', 'url_name': 'hrms:position_list', 'icon': 'fas fa-briefcase', 'perm': 'hrms.view_position'},
        {'label': 'Leaves', 'url_name': 'hrms:leave_list', 'icon': 'fas fa-calendar-minus', 'perm': 'hrms.view_leaveapplication'},
        {'label': 'Attendance', 'url_name': 'hrms:attendance_dashboard', 'icon': 'fas fa-clock', 'perm': 'hrms.view_attendancerecord'},
        {'label': 'Time & Attendance', 'url_name': 'hrms:user_attendance', 'icon': 'fas fa-user-clock', 'perm': None},
        {'label': 'Work Schedules', 'url_name': 'hrms:schedule_list', 'icon': 'fas fa-calendar-week', 'perm': 'hrms.view_workschedule'},
        {'label': 'Payroll', 'url_name': 'hrms:payroll_dashboard', 'icon': 'fas fa-money-bill-wave', 'perm': 'hrms.view_payroll'},
        {'label': 'Training', 'url_name': 'hrms:training_dashboard', 'icon': 'fas fa-graduation-cap', 'perm': 'hrms.view_trainingprogram'},
        {'label': 'Performance', 'url_name': 'hrms:performance_dashboard', 'icon': 'fas fa-star', 'perm': 'hrms.view_performancereview'},
        {'label': 'Reports', 'url_name': 'hrms:reports', 'icon': 'fas fa-chart-bar', 'perm': 'hrms.view_report'},
        {'label': 'Analytics', 'url_name': 'hrms:analytics_dashboard', 'icon': 'fas fa-chart-line', 'perm': 'hrms.view_analytics'},
        {'label': 'Vendor Integration', 'url_name': 'hrms:vendor_integration_dashboard', 'icon': 'fas fa-handshake', 'perm': 'hrms.view_vendorstaff'},
    ]
}

# Prepend HRMS section so it appears before the generic Apps section
HAWWA_SIDEBAR_APPS.insert(0, HRMS_SIDEBAR)

if _apps_section['items']:
    HAWWA_SIDEBAR_APPS.append(_apps_section)

# Currency Configuration
DEFAULT_CURRENCY = 'QAR'
CURRENCY_SYMBOL = 'QAR'
CURRENCY_FORMAT = 'QAR {amount:,.2f}'

LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

LANGUAGE_COOKIE_NAME = 'hawwa_language'
LANGUAGE_COOKIE_AGE = 60 * 60 * 24 * 365  # 1 year in seconds

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(levelname)s] %(asctime)s %(name)s %(message)s [request_id=%(request_id)s ip=%(ip)s url=%(url)s]',
        },
        'simple': {
            'format': '%(levelname)s %(message)s',
        },
        'json': {
            'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "name": "%(name)s", "message": "%(message)s", "request_id": "%(request_id)s", "ip": "%(ip)s", "url": "%(url)s"}',
        },
    },
    'filters': {
        'request_context': {
            '()': 'hawwa.logging_filters.RequestContextFilter',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'hawwa_app.log',
            'maxBytes': 10 * 1024 * 1024,
            'backupCount': 7,
            'formatter': 'verbose',
            'filters': ['request_context'],
        },
        'django_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django_debug.log',
            'maxBytes': 20 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
            'filters': ['request_context'],
        },
        'django_error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django_error.log',
            'maxBytes': 20 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose',
            'filters': ['request_context'],
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['request_context'],
        },
    },
    'loggers': {
        '': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
        },
        'django': {
            'handlers': ['django_file', 'django_error_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Capture request/exception errors into a dedicated error log file
        'django.request': {
            'handlers': ['django_error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'gunicorn.error': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'gunicorn.access': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Admin customization
ADMIN_SITE_HEADER = "Hawwa Admin"
ADMIN_SITE_TITLE = "Hawwa Admin Portal"
ADMIN_INDEX_TITLE = "Welcome to Hawwa Administration"

# ===================================================================
# EMAIL SETTINGS
# ===================================================================
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_TIMEOUT = int(os.environ.get('EMAIL_TIMEOUT', '30'))

# Default email addresses
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@trendzapps.com')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', 'noreply@trendzapps.com')
EMAIL_SUBJECT_PREFIX = os.environ.get('EMAIL_SUBJECT_PREFIX', '[Trendz] ')

# Specific email addresses for different functions
REGISTRATION_EMAIL = os.environ.get('REGISTRATION_EMAIL', 'noreply@trendzapps.com')
SUPPORT_EMAIL = os.environ.get('SUPPORT_EMAIL', 'support@trendzapps.com')
DEMO_EMAIL = os.environ.get('DEMO_EMAIL', 'hello@trendzapps.com')
SALES_EMAIL = os.environ.get('SALES_EMAIL', 'hello@trendzapps.com')

# ===================================================================
# COMPANY INFORMATION
# ===================================================================
COMPANY_NAME = os.environ.get('COMPANY_NAME', 'Hawwa Wellness')

# Custom application settings
HAWWA_SETTINGS = {
    'COMPANY_NAME': COMPANY_NAME,
    'SUPPORT_EMAIL': os.environ.get('SUPPORT_EMAIL', 'hello@trendzapps.com'),
    'PHONE_NUMBER': os.environ.get('PHONE_NUMBER', '+974 7212 6440'),
    'DEMO_EMAIL': DEMO_EMAIL,
    'SALES_EMAIL': SALES_EMAIL,
}

# Authentication
AUTH_USER_MODEL = 'accounts.User'
LOGIN_REDIRECT_URL = 'core:home'
LOGOUT_REDIRECT_URL = 'core:home'
LOGIN_URL = 'login'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
    },
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Cache configuration
# Production recommendation: use a shared Redis cache so that background workers
# and multiple web processes share rate-limiting and session data. Set
# `REDIS_URL` (e.g. redis://:password@redis-host:6379/1) in the environment.
# This example uses `django-redis` (install with `pip install django-redis`) and
# exposes a `default` cache. `django-ratelimit` also benefits from a shared
# cache backend (use the `default` cache or configure `RATELIMIT_CACHE`).
REDIS_URL = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1')

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            # Use the recommended client class
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            # Optional: set a prefix to avoid collisions
            'KEY_PREFIX': os.environ.get('HAWWA_CACHE_KEY_PREFIX', 'hawwa'),
        }
    }
}

# Optional: tell django-ratelimit which cache alias to use (defaults to settings.CACHES['default']).
# RATELIMIT_USE_CACHE = 'default'
