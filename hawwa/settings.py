"""
Django settings for hawwa project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use an environment variable for production. Keep the development fallback for
# local development only. Never commit a production secret key to source.
_env_secret = os.environ.get('HAWWA_SECRET_KEY') or os.environ.get('SECRET_KEY')
if _env_secret:
    SECRET_KEY = _env_secret
else:
    # Development fallback only
    SECRET_KEY = 'django-insecure-wuy_yg&5m5=b3%dvz@!(c(!_@+w@slo^b-svc67pt$o!okv+9f'

# Toggle production mode with an environment variable.
# Set `HAWWA_ENV=production` or `DJANGO_PRODUCTION=1` in your production env.
_is_prod = os.environ.get('HAWWA_ENV', '').lower() == 'production' or os.environ.get('DJANGO_PRODUCTION') in ('1', 'true', 'True')
DEBUG = not _is_prod

# Hosts allowed. Use environment variable to override in production.
ALLOWED_HOSTS = os.environ.get('HAWWA_ALLOWED_HOSTS', '127.0.0.1,localhost,192.168.100.2').split(',')

# Production security defaults (applied when in production mode)
if _is_prod:
    # Detect test runner to avoid changing behavior during tests (which use HTTP by default)
    _running_tests = any(('test' in a or 'pytest' in a) for a in sys.argv)
    # HSTS: only enable after verifying HTTPS termination
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000')) if not _running_tests else 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True') in ('1', 'true', 'True')
    SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'True') in ('1', 'true', 'True')
    SECURE_SSL_REDIRECT = (os.environ.get('SECURE_SSL_REDIRECT', 'True') in ('1', 'true', 'True')) and not _running_tests
    SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'True') in ('1', 'true', 'True')
    CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'True') in ('1', 'true', 'True')
    # X-Frame-Options is already set by default middleware, but explicit is good
    X_FRAME_OPTIONS = os.environ.get('X_FRAME_OPTIONS', 'DENY')
    # Basic sanity: require a non-default secret key
    if not _running_tests:
        if not _env_secret or _env_secret.startswith('django-insecure-'):
            raise ImproperlyConfigured('A strong SECRET_KEY must be set in the environment when running in production.')


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'crispy_forms',
    'crispy_bootstrap5',
    'corsheaders',
    'django_extensions',
    'import_export',
]

LOCAL_APPS = [
    'accounts',
    'core',
    'services',
    'bookings',
    'vendors',
    'ai_buddy',
    'wellness',
    'payments',
    'reporting',
    'admin_dashboard',
    'operations',
    'analytics',
    'financial',
    'hrms',
    'change_management',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'hawwa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                    'django.template.context_processors.request',
                    'django.template.context_processors.i18n',
                    'django.template.context_processors.static',
                    'django.template.context_processors.media',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'hawwa.context_processors.hawwa_settings',
                ],
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'services.templatetags.service_extras',
            ],
        },
    },
]

WSGI_APPLICATION = 'hawwa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''
# Database configuration for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'hawwa_db',
        'USER': 'dbadmin',
        'PASSWORD': '0penP@$$',
        'HOST': 'localhost',
        'PORT': '5432',
        'CONN_MAX_AGE': 0,  # Disable persistent connections for development
        'OPTIONS': {
            'connect_timeout': 30,
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Currency Configuration
DEFAULT_CURRENCY = 'QAR'
CURRENCY_SYMBOL = 'QAR'
CURRENCY_FORMAT = 'QAR {amount:,.2f}'

LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

LANGUAGE_COOKIE_NAME = 'hawwa_language'
LANGUAGE_COOKIE_AGE = 60 * 60 * 24 * 365  # 1 year in seconds

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'django_debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Admin customization
ADMIN_SITE_HEADER = "Hawwa Admin"
ADMIN_SITE_TITLE = "Hawwa Admin Portal"
ADMIN_INDEX_TITLE = "Welcome to Hawwa Administration"

# Custom application settings
HAWWA_SETTINGS = {
    'COMPANY_NAME': 'Hawwa LLC',
    'SUPPORT_EMAIL': os.environ.get('HAWWA_SUPPORT_EMAIL', 'hello@hawwawellness.com'),
    'PHONE_NUMBER': os.environ.get('HAWWA_PHONE_NUMBER', '+974 7212 6440'),
}

# Authentication
AUTH_USER_MODEL = 'accounts.User'
LOGIN_REDIRECT_URL = 'core:home'
LOGOUT_REDIRECT_URL = 'core:home'
LOGIN_URL = 'login'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
    },
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"