# Generated by Django 5.2.3 on 2025-09-17 18:56

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIBuddyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buddy_name', models.CharField(default='Hawwa', max_length=50, verbose_name='AI Buddy Name')),
                ('personality_type', models.CharField(choices=[('supportive', 'Supportive & Encouraging'), ('clinical', 'Clinical & Professional'), ('friendly', 'Friendly & Casual'), ('gentle', 'Gentle & Nurturing'), ('practical', 'Practical & Direct')], default='supportive', max_length=20, verbose_name='Personality Type')),
                ('check_in_frequency', models.PositiveIntegerField(default=1, help_text='How often to check in (days)', verbose_name='Check-in Frequency')),
                ('preferred_topics', models.JSONField(blank=True, default=list, help_text='List of preferred conversation topics', verbose_name='Preferred Topics')),
                ('language_preference', models.CharField(default='en', max_length=10, verbose_name='Language Preference')),
                ('notifications_enabled', models.BooleanField(default=True, verbose_name='Enable Notifications')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_buddy_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'AI Buddy Profile',
                'verbose_name_plural': 'AI Buddy Profiles',
            },
        ),
        migrations.CreateModel(
            name='CareRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('nutrition', 'Nutrition'), ('exercise', 'Exercise'), ('rest', 'Rest & Recovery'), ('wellness', 'Wellness Activity'), ('medical', 'Medical Consultation'), ('emotional', 'Emotional Support'), ('baby_care', 'Baby Care Tips')], max_length=20, verbose_name='Recommendation Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='medium', max_length=10, verbose_name='Priority')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is Completed')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due Date')),
                ('completed_date', models.DateTimeField(blank=True, null=True, verbose_name='Completed Date')),
                ('ai_confidence', models.FloatField(default=0.0, help_text='AI confidence score (0.0-1.0)', verbose_name='AI Confidence')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional data like related services, context, etc.')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='care_recommendations', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Care Recommendation',
                'verbose_name_plural': 'Care Recommendations',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('conversation_type', models.CharField(choices=[('general', 'General Support'), ('wellness', 'Wellness Check-in'), ('nutrition', 'Nutrition Guidance'), ('emotional', 'Emotional Support'), ('schedule', 'Schedule Planning'), ('milestone', 'Milestone Tracking')], default='general', max_length=20, verbose_name='Conversation Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('user', 'User Message'), ('ai', 'AI Response'), ('system', 'System Message')], max_length=10, verbose_name='Message Type')),
                ('content', models.TextField(verbose_name='Content')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional data like sentiment, confidence, etc.')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is Read')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_buddy.conversation', verbose_name='Conversation')),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone_type', models.CharField(choices=[('physical', 'Physical Recovery'), ('emotional', 'Emotional Wellbeing'), ('baby_care', 'Baby Care Skills'), ('self_care', 'Self Care'), ('family', 'Family Bonding'), ('social', 'Social Connection')], max_length=20, verbose_name='Milestone Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('target_date', models.DateField(blank=True, null=True, verbose_name='Target Date')),
                ('achieved_date', models.DateField(blank=True, null=True, verbose_name='Achieved Date')),
                ('is_achieved', models.BooleanField(default=False, verbose_name='Is Achieved')),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Progress from 0-100%', verbose_name='Progress Percentage')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Milestone',
                'verbose_name_plural': 'Milestones',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WellnessTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('mood', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('neutral', 'Neutral'), ('low', 'Low'), ('concerning', 'Concerning')], max_length=20, verbose_name='Mood')),
                ('energy_level', models.CharField(choices=[('high', 'High Energy'), ('moderate', 'Moderate Energy'), ('low', 'Low Energy'), ('exhausted', 'Exhausted')], max_length=20, verbose_name='Energy Level')),
                ('sleep_quality', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('very_poor', 'Very Poor')], max_length=20, verbose_name='Sleep Quality')),
                ('sleep_hours', models.PositiveIntegerField(default=0, verbose_name='Hours of Sleep')),
                ('pain_level', models.PositiveIntegerField(default=0, help_text='Scale of 0-10', verbose_name='Pain Level')),
                ('notes', models.TextField(blank=True, verbose_name='Additional Notes')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wellness_tracking', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Wellness Tracking',
                'verbose_name_plural': 'Wellness Tracking',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
