# Generated by Django 5.2.3 on 2025-09-19 03:45

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ISO 4217 currency code (e.g., USD, EUR, QAR)', max_length=3, unique=True)),
                ('name', models.CharField(help_text='Currency full name', max_length=50)),
                ('symbol', models.CharField(help_text='Currency symbol (e.g., $, €, ﷼)', max_length=5)),
                ('exchange_rate_to_qar', models.DecimalField(decimal_places=4, default=Decimal('1.0000'), help_text='Exchange rate to Qatari Riyal (base currency)', max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='FinancialForecast',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('forecast_type', models.CharField(choices=[('revenue', 'Revenue Forecast'), ('cash_flow', 'Cash Flow Forecast'), ('subscription_growth', 'Subscription Growth'), ('churn_prediction', 'Churn Prediction'), ('seasonal_trends', 'Seasonal Trends')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('forecast_period_start', models.DateField()),
                ('forecast_period_end', models.DateField()),
                ('generated_date', models.DateTimeField(auto_now_add=True)),
                ('historical_data', models.JSONField(default=dict, help_text='Historical data used for forecast')),
                ('forecast_data', models.JSONField(default=dict, help_text='Forecast results and predictions')),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('accuracy_level', models.CharField(choices=[('high', 'High (90%+)'), ('medium', 'Medium (70-89%)'), ('low', 'Low (50-69%)'), ('experimental', 'Experimental (<50%)')], max_length=20)),
                ('predicted_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('predicted_growth_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('risk_factors', models.JSONField(default=list, help_text='Identified risk factors')),
                ('algorithm_used', models.CharField(default='Linear Regression', max_length=50)),
                ('data_points_used', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-generated_date'],
                'indexes': [models.Index(fields=['forecast_type', 'is_active'], name='payments_fi_forecas_36aa2e_idx'), models.Index(fields=['forecast_period_start', 'forecast_period_end'], name='payments_fi_forecas_b95a4c_idx')],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('card', 'Credit/Debit Card'), ('bank_transfer', 'Bank Transfer'), ('digital_wallet', 'Digital Wallet'), ('cash', 'Cash'), ('check', 'Check'), ('crypto', 'Cryptocurrency')], max_length=20)),
                ('provider', models.CharField(help_text='e.g., Visa, MasterCard, PayPal', max_length=50)),
                ('last_four_digits', models.CharField(blank=True, help_text='Last 4 digits for cards', max_length=4)),
                ('expiry_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('expiry_year', models.IntegerField(blank=True, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Subscription plan name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('billing_cycle', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('trial_end_date', models.DateTimeField(blank=True, null=True)),
                ('next_billing_date', models.DateTimeField()),
                ('last_billing_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('trial', 'Trial Period'), ('active', 'Active'), ('past_due', 'Past Due'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('suspended', 'Suspended')], default='trial', max_length=20)),
                ('is_auto_renew', models.BooleanField(default=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional subscription data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='payments.currency')),
                ('payment_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.paymentmethod')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='services.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecurringBilling',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('billing_period_start', models.DateTimeField()),
                ('billing_period_end', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('gateway_transaction_id', models.CharField(blank=True, max_length=100)),
                ('gateway_response', models.JSONField(blank=True, default=dict)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('next_retry_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('failure_reason', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='payments.currency')),
                ('payment_method', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.paymentmethod')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billing_records', to='payments.subscription')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentReminder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reminder_type', models.CharField(choices=[('upcoming_payment', 'Upcoming Payment'), ('overdue_payment', 'Overdue Payment'), ('failed_payment', 'Failed Payment'), ('trial_ending', 'Trial Ending'), ('subscription_expiring', 'Subscription Expiring')], max_length=30)),
                ('escalation_level', models.IntegerField(choices=[(1, 'First Reminder'), (2, 'Second Reminder'), (3, 'Final Notice'), (4, 'Account Suspension Notice')], default=1)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('scheduled_for', models.DateTimeField()),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('send_email', models.BooleanField(default=True)),
                ('send_sms', models.BooleanField(default=False)),
                ('send_push', models.BooleanField(default=False)),
                ('email_opened', models.BooleanField(default=False)),
                ('email_clicked', models.BooleanField(default=False)),
                ('response_received', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_reminders', to=settings.AUTH_USER_MODEL)),
                ('billing_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='payments.recurringbilling')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_reminders', to='payments.subscription')),
            ],
            options={
                'ordering': ['scheduled_for'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeRateHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_to_qar', models.DecimalField(decimal_places=4, max_digits=10)),
                ('date_recorded', models.DateField(auto_now_add=True)),
                ('source', models.CharField(default='Manual', help_text='Rate source (API, Manual, etc.)', max_length=50)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rate_history', to='payments.currency')),
            ],
            options={
                'ordering': ['-date_recorded'],
                'indexes': [models.Index(fields=['currency', 'date_recorded'], name='payments_ex_currenc_7a6392_idx')],
                'unique_together': {('currency', 'date_recorded')},
            },
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['user', 'status'], name='payments_su_user_id_058311_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['next_billing_date'], name='payments_su_next_bi_574c1e_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['service', 'status'], name='payments_su_service_693757_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringbilling',
            index=models.Index(fields=['subscription', 'status'], name='payments_re_subscri_5b6181_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringbilling',
            index=models.Index(fields=['billing_period_start', 'billing_period_end'], name='payments_re_billing_ca5944_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringbilling',
            index=models.Index(fields=['next_retry_at'], name='payments_re_next_re_1300d8_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentreminder',
            index=models.Index(fields=['user', 'status'], name='payments_pa_user_id_2f034a_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentreminder',
            index=models.Index(fields=['scheduled_for', 'status'], name='payments_pa_schedul_070c8e_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentreminder',
            index=models.Index(fields=['reminder_type', 'escalation_level'], name='payments_pa_reminde_91a9d3_idx'),
        ),
    ]
